{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rangel\\\\Desktop\\\\W.D\\\\Learning-Full-Stack\\\\ReactJS\\\\src\\\\components\\\\MiComponente.js\";\n//Acá debemos importar react\nimport React from 'react'; //Importo react y cargo el modulo de node 'react'\n//Ahora defino una clase de javascript\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MiComponente extends React.Component {\n  render() {\n    //El metodo render es el que si encarga de mostrar informacion por pantalla al usuario, es decir, mostrar el js y el HTML al usuario\n    let receta = {\n      //mi objeto JSON creado con una variable y sus propriedades\n      nombre: 'pizza',\n      ingredientes: ['tomate', 'queso', 'jamon cocido'],\n      //un array con los ingredientes\n      calorias: 400\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mi-componente\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hola, soy el componente llamado: MiComponente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Estoy probando el componente con react.fragment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: 'Receta: ' + receta.nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: 'Calorias: ' + receta.calorias\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: //Puedo mostrar todo en un ol\n        receta.ingredientes.map((ingrediente, i) => {\n          //El map lo que hace es recoger un array y sacarme los datos\n          console.log(ingrediente);\n          return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  }\n\n} //Ahora puedo exportar mi componente para poder utilizarlo dentro de cualquier otra vista\n\n\nexport default MiComponente; //Voy en app.js e importo mi componente\n//Otra forma de hacer componentes: utilizando {}\n//import React, {component} from 'react';\n//Si yo pusiera un <h2> abajo del <h1> no funcionaria porque el return solo puede mostrar una etiqueta. Entonces creamos un <React.Fragment>\n//Yo también podría utilizar el div en lugar del react.fragment","map":{"version":3,"sources":["C:/Users/Rangel/Desktop/W.D/Learning-Full-Stack/ReactJS/src/components/MiComponente.js"],"names":["React","MiComponente","Component","render","receta","nombre","ingredientes","calorias","map","ingrediente","i","console","log"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;AAE3B;;;;AACA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAEvCC,EAAAA,MAAM,GAAG;AAAE;AAEP,QAAIC,MAAM,GAAG;AAAE;AACXC,MAAAA,MAAM,EAAE,OADC;AAETC,MAAAA,YAAY,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,cAApB,CAFL;AAE0C;AACnDC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAOA,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAK,aAAaH,MAAM,CAACC;AAAzB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAK,eAAeD,MAAM,CAACG;AAA3B;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBACM;AACEH,QAAAA,MAAM,CAACE,YAAP,CAAoBE,GAApB,CAAwB,CAACC,WAAD,EAAcC,CAAd,KAAoB;AAAE;AAC1CC,UAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,8BACI;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SAPD;AAFR;AAAA;AAAA;AAAA;AAAA,cALJ,eAiBI;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuBH;;AAlCsC,C,CAoC3C;;;AACA,eAAeR,YAAf,C,CACA;AAEA;AACA;AAEA;AACA","sourcesContent":["//Acá debemos importar react\r\nimport React from 'react'; //Importo react y cargo el modulo de node 'react'\r\n\r\n//Ahora defino una clase de javascript\r\nclass MiComponente extends React.Component {\r\n\r\n    render() { //El metodo render es el que si encarga de mostrar informacion por pantalla al usuario, es decir, mostrar el js y el HTML al usuario\r\n\r\n        let receta = { //mi objeto JSON creado con una variable y sus propriedades\r\n            nombre: 'pizza',\r\n            ingredientes: ['tomate', 'queso', 'jamon cocido'], //un array con los ingredientes\r\n            calorias: 400\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"mi-componente\">\r\n                <h1>Hola, soy el componente llamado: MiComponente</h1>\r\n                <h2>Estoy probando el componente con react.fragment</h2>\r\n                <h1>{'Receta: ' + receta.nombre}</h1>\r\n                <h2>{'Calorias: ' + receta.calorias}</h2>\r\n                <ol>\r\n                    { //Puedo mostrar todo en un ol\r\n                        receta.ingredientes.map((ingrediente, i) => { //El map lo que hace es recoger un array y sacarme los datos\r\n                            console.log(ingrediente);\r\n                            return (\r\n                                <li>\r\n                                    \r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ol>\r\n                <hr />\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n//Ahora puedo exportar mi componente para poder utilizarlo dentro de cualquier otra vista\r\nexport default MiComponente;\r\n//Voy en app.js e importo mi componente\r\n\r\n//Otra forma de hacer componentes: utilizando {}\r\n//import React, {component} from 'react';\r\n\r\n//Si yo pusiera un <h2> abajo del <h1> no funcionaria porque el return solo puede mostrar una etiqueta. Entonces creamos un <React.Fragment>\r\n//Yo también podría utilizar el div en lugar del react.fragment\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}